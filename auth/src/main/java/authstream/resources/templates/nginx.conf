worker_processes 1;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict cache 10m;
    init_by_lua_block {
        cjson = require "cjson"
    }

    server {
        listen [[${NGINX_SERVER_PORT}]];
        server_name [[${DOMAIN_NAME}]];
        auth_request uri | off;
        location / {
            access_by_lua_block {
                local sock = ngx.socket.tcp()
                sock:settimeout([[${AUTH_SERVER_TIMEOUT}]])

                local ok, err = sock:connect("[[${AUTH_SERVER_DOMAIN}]]", [[${AUTH_SERVER_PORT}]])
                if not ok then
                    ngx.log(ngx.ERR, "Failed to connect to auth service: ", err)
                    return ngx.exit(500)
                end
                
                local original_method = ngx.req.get_method()
                local http_request = table.concat({
                    original_method .. " /authenticate HTTP/1.1",
                    "Host: [[${AUTH_SERVER_DOMAIN}]]",
                    "Connection: close",
                    "Accept: application/json",
                    "X-Real-IP: " .. ngx.var.remote_addr,
                    "X-Forwarded-For: " .. (ngx.var.http_x_forwarded_for or ngx.var.remote_addr),
                    "",
                    ""
                }, "\r\n")
                
                local bytes_sent, err = sock:send(http_request)
                if not bytes_sent then
                    ngx.log(ngx.ERR, "Failed to send auth request: ", err)
                    sock:close()
                    return ngx.exit(500)
                end
                
                local line, err = sock:receive("*l")
                local headers = {}
                while line and line ~= "" do
                    headers[#headers + 1] = line
                    line, err = sock:receive("*l")
                end
                
                local body, err = sock:receive("*a")
                sock:close()
                
                if not body then
                    ngx.log(ngx.ERR, "Failed to receive auth response: ", err)
                    return ngx.exit(500)
                end
                
                local success, json_data = pcall(cjson.decode, body)
                if not success then
                    ngx.log(ngx.ERR, "Failed to parse JSON response: ", body)
                    return ngx.exit(500)
                end
                
                if json_data.status == "success" then
                    ngx.log(ngx.INFO, "Authentication successful")
                else
                    ngx.log(ngx.ERR, "Authentication failed: " .. body)
                    return ngx.exit(403)
                end
            }
            
            proxy_pass [[${APP_SERVER_DOMAIN}]];
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
